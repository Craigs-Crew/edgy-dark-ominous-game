Shapes API Reference
====================

Shape definition registration
=============================			-- registers a shape definition
shapes:register_shapedef("<shapename>", {
	description = "Shape Description",
	node_box = {<node_box>},			-- If used, shape is assumed to be a nodebox and the mesh field is ignored
	mesh = "<mesh>",					-- (optional)
	collision_box = {<collision_box>},	-- (optional) If not provided, uses node_box
	selection_box = {<selection_box>},	-- (optional) If not provided, uses node_box/collision_box
	category = "<category>",			-- Adds a category to the shape, can be called when disabling with "cat:<category>"
	groups = {<groups>},				-- (optional)
	sunlight_propagates = <boolean>,	-- (optional) defaults to true
	drop = "<drop>",					-- (optional) Currently doesn't support tables, only provide strings
	connects_to = {<connects_to>},		-- (optional)
	connect_sides = {<connect_sides>},	-- (optional)
	backface_culling = <boolean>,		-- (optional) defaults to true
	align_style = "style",				-- (optional) defaults to "world"
	overlay = "<overlay>",				-- (optional) Adds an overlay texture to wield/inv image
	disable_by_default = <boolean>,		-- (optional) true to disable shape by default (enabled by adding to disable list)
	crafting = {						-- (optional) Adds a crafting recipe for this shape
		amount = <no.>,					-- (optional) defaults to 1
		replacements = <replacements>,	-- (optional)
		recipe = {<recipe>},
	},
})

-- special values for `drop` and `crafting`
-- "shapes:self" = nodename
-- "shapes:shape_<shapename>" = shapename 

Basic shape registration
========================
shapes:register_shape("<modname>:<nodename>", "<shape1>, <shape2>, <group:shgroup1>")
-- Second field is for `disabled`, see below

Optional shape customization(s)
===============================
shapes:register_shape("<modname>:<nodename>",  {
	disabled = "<shape1>, <shape2>, <cat:shape>"	-- Makes certain shape not generate, supports category with `cat:`
	description_prefix = "Description Prefix",
	<shape>_description = "Description",
	<shape>_tiles = {"texture1", "texture2"..},		-- Priority over global_tiles
	global_tiles = {"texture1", "texture2"..},		-- Not applicable for pane/fence/wall
	texture = "texture1",							-- global texture for only pane/fence/wall
	<shape>_sunlight_propagates = <boolean>,
	groups = {groups},								-- not_in_creative_inventory is applied by default
	<shape>_drop = <dropname>,						-- Priority over drop
	drop = <dropname>,
	<shape>_light_source = <integer>,				-- Priority over light_source
	light_source = <integer>,
	shape_use_texture_alpha = <alpha>,				-- Priority over use_texture_alpha
	use_texture_alpha = <alpha>,
	<shape>_backface_culling = <boolean>,			-- Priority over backface_culling (Not applicable for meshnodes)
	backface_culling = <boolean>,					-- Not applicable for meshnodes
	<shape>_align_style = "style",					-- Priority over align_style (Not applicable for meshnodes)
	backface_culling = "style",						-- Not applicable for meshnodes
})

Shapes List
===========
cat:slab
==========
slab1
slab2
slab4
slab
slab12
==========
cat:cube
==========
cube1
cube2
cube4
cube
cube12
==========
cat:step
==========
step1
step2
step4
step
step12
===========
cat:stair
===========
stair
halfstair
righthalfstair
outerstair
innerstair
forkstair
================
cat:splitstair
================
splitstair1
splitstair4
splitstair
==========
cat:pole
==========
pole
wallpole
cornerpole
============
cat:pillar
============
pillar
wallpillar
halfpillar
wall
=================
cat:pillarcrown
=================
pillarcrown
halfpillarcrown
wallpillarcrown
crosscrown
==========
cat:beam
==========
beam
crossbeam
linkdown
============
cat:corner
============
corner1
corner2
corner4
corner
corner12
============
cat:sphere
============
sphere (mesh)
===========
cat:slope
===========
slope (mesh)
slope2 (mesh)
slope3 (mesh)
innerslope (mesh)
innerslope2 (mesh)
innerslope3 (mesh)
cutinnerslope (mesh)
cutinnerslope2 (mesh)
cutinnerslope3 (mesh)
outerslope (mesh)
outerslope2 (mesh)
outerslope3 (mesh)
cutouterslope (mesh)
cutouterslope2 (mesh)
cutouterslope3 (mesh)
cutouterslope4 (mesh)
===========
cat:fence
===========
fence
fencerail
==========
cat:pane
==========
pane_flat
pane